{"version":3,"sources":["data/classes/BP_Base_Usable_Item.js","data/classes/BP_Door_Collision.js","data/classes/BP_Game_Instance.js","data/classes/BP_Inventory_Component.js","data/classes/BP_Item_Pickup.js","data/classes/BP_Paper_NPC.js","data/classes/BP_Paper_Pawn.js","data/classes/BP_Paper_Player.js","data/classes/BPFL_Actor.js","data/classes/GM_Game.js","data/classes/Interactable_Interface.js","data/classes/UI_Button.js","data/classes/UI_Inv_Slot.js","data/classes/WBP_Base_Menu.js","data/classes/WBP_Dialogue_Box.js","data/classes/WBP_Inventory.js","data/classes/WBP_Inventory_Menu.js","data/classes/WBP_Main_Overlay.js","data/classes/WBP_Menu.js","data/classes/WBP_Player_Menu.js","data/classindex.js","components/styled/containers.js","components/styled/text.js","components/sidenav/components/header.js","components/styledcomponents.js","components/sidenav/components/classtable.js","components/sidenav/index.js","components/styled/node.js","data/index.js","pages/subpages/node.js","components/styled/class.js","components/container/linktable.js","pages/subpages/class.js","pages/subpages/index.js","pages/app.js","serviceWorker.js","index.js"],"names":["data","function","Use_Item","desc","inputs","outputs","macro","Move_Actor_To_Location","Load_Game_and_Open","Save_Game","Add_Item","Attempt_to_Add_Item","Attempt_to_Add_to_Stack","Clear_Item_Slot","Drop_Item","Drop_Item_at_Slot","Find_First_Empty_Slot","Find_Slot_Containing","Get_Item_Structure_for_Slot","Get_Slot","Load_Inventory","Modify_Slot_Data","Remove_Number_Of_Item","Spawn_Item","Update_Save_Game","Pickup_Item","Vanish","Add_Movement_with_Collision","Can_Dialogue_be_Read","Check_NPC_Direction","Check_for_Dialogue","Does_Dialogue_Exist","Get_Dialogue","Get_Relative_Movement","Next_Point_in_List","Reset_Path","Set_Can_Dialogue_be_Read","Switch_on_End","Update_Direction","Update_Movement_Along_Path","Update_Playback_Rate","Update_State","Calculate_Velocity","Get_Min_and_Max","Get_Anim_State","Get_Direction","Set_Anim_Based_on_Direction","Set_Anim_State","Set_Direction","Set_Is_Moving","Update_Animations","Add_Movement","Attempt_to_Pickup_Item","Get_Opposite_Direction","Get_Inventory_Component","Find_New_Game_Spawn_Location","Check_For_Dialogue","Highlight_Button","Unhighlight_Button","Update_Button_State","Update_Item","Change_Active_Button","Flip_Button_Highlight","Get_Current_Button","Press_Current_Button","Setup_Button_Array","Increment_Index","Show_Next_Dialogue","Start_New_Dialogue","Flip_Inv_Slot_Highlight","Flip_Inventory_Menu","Generate_Inv_Grid","Get_Current_Slot","Hide_Inventory","Navigate_Inv_Horizontally","Navigate_Inv_Vertically","Press_Current_Slot","Swap_Two_Slots","Display_Item_Text","Change_Active_Button_Menu","End_Dialogue","Play_Fade","Press_Button_Menu","ShowHide_In_Game_Menu","Start_Dialogue","Check_Can_Continue","Container","styled","div","SideNav","style","H1Title","h1","H2Title","h2","H3Title","h3","Header","this","props","title","React","Component","NavButton","button","List","ul","ItemList","ClassTable","retrieveData","e","preventDefault","state","class","target","firstChild","datalog","push","type","functionCall","classes","map","item","id","onClick","bind","func","PinBox","li","NodeList","NodeImage","img","Classes","BP_Base_Usable_Item","require","default","BP_Door_Collision","BP_Game_Instance","BP_Inventory_Component","BP_Item_Pickup","BP_Paper_NPC","BP_Paper_Pawn","BP_Paper_Player","BPFL_Actor","GM_Game","Interactable_Interface","UI_Button","UI_Inv_Slot","WBP_Base_Menu","WBP_Dialogue_Box","WBP_Inventory","WBP_Inventory_Menu","WBP_Main_Overlay","WBP_Menu","WBP_Player_Menu","NodeDetails","NodeTitle","p","PinDesc","NodeDesc","PinList","list","Node","focusType","mode","src","process","NodeButton","dataType","LinkTable","checkDataType","Object","keys","Class","Index","App","retrieveState","setState","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9153715.chunk.js","sourcesContent":["const data = {\r\n    function: {\r\n        Use_Item: {\r\n            desc: \"This function is designed to be overridden by a child blueprint to add functionality to an item\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Base Usable Item Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {}\r\n\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Move_Actor_To_Location: {\r\n            desc: \"Attempt to move the player to the specified location relative to this instance of the bp\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Door Collision Object\"],\r\n                [\"Paper Pawn\", \"BP Paper Pawn Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {}\r\n\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Load_Game_and_Open: {\r\n            desc: \"Attempts to load the save game and opens the main game level to reload the players location.\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Game Instance Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Save_Game: {\r\n            desc: \"Saves the current SaveGame_Ref to the \\\"SaveGame\\\". Prints true/false whether successfully saved\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Game Instance Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {}\r\n\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Add_Item: {\r\n            desc: \"Updates the specific slot to contain the item and amount entered, automatically updates the inventory ui for that item\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"],\r\n                [\"Slot\", \"Integer\"],\r\n                [\"Item\", \"E_Items Enum\"],\r\n                [\"Amount\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Attempt_to_Add_Item: {\r\n            desc: \"Used to efficiently add items to the inventory, accounts for inventory size and stacks containing that item already. Any items that do not fit in the inventory will be dropped as an item pickup.\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"],\r\n                [\"Item\", \"E_Items Enum\"],\r\n                [\"Amount\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Attempt_to_Add_to_Stack: {\r\n            desc: \"Attempts to add an item only to an existing stack. This is designed to be used inside AttemptToAddItem\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"],\r\n                [\"Item\", \"E_Items Enum\"],\r\n                [\"Amount\", \"Integer\"],\r\n                [\"Stack Size\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Clear_Item_Slot: {\r\n            desc: \"Clears the item slot specified and updates the inventory widget\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"],\r\n                [\"Slot\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Drop_Item: {\r\n            desc: \"Drops a certain amount of the item (Respects stack sizes)\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"],\r\n                [\"Item\", \"E_Items Enum\"],\r\n                [\"Amount\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Drop_Item_at_Slot: {\r\n            desc: \"Clears the item slot and drops the item (Respects stack size)\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"],\r\n                [\"Slot\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Find_First_Empty_Slot: {\r\n            desc: \"Attempts to find the first empty slot\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Empty Slot\", \"Integer\"],\r\n                [\"No Slots\", \"Boolean\"]\r\n            ]\r\n        },\r\n        Find_Slot_Containing: {\r\n            desc: \"Attempts to find a slot containing the specified item (Could be used in a crafting system)\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"],\r\n                [\"Item to Find\", \"E_Items Enum\"],\r\n                [\"Must Not be Full?\", \"Boolean\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Slot\", \"Integer\"],\r\n                [\"Slot Found?\", \"Boolean\"]\r\n            ]\r\n        },\r\n        Get_Item_Structure_for_Slot: {\r\n            desc: \"Returns the data table structure for the specified slot, this is for getting extra information about an item easily\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"],\r\n                [\"Slot\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"fItem Struct\", \"F Item Struct Structure\"]\r\n            ]\r\n        },\r\n        Get_Slot: {\r\n            desc: \"Gets the item stored in the specified slot\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"],\r\n                [\"Slot\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Return Value\", \"F Inventory Struct Structure\"]\r\n            ]\r\n        },\r\n        Load_Inventory: {\r\n            desc: \"Used to load the saved inventory or create a new one if there isnt one saved\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Modify_Slot_Data: {\r\n            desc: \"Sets the specified slot to the specified item and amount\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"],\r\n                [\"Slot\", \"Integer\"],\r\n                [\"Item\", \"E_Items Enum\"],\r\n                [\"Amount\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Modifie Struct\", \"F Inventory Struct Structure\"]\r\n            ]\r\n        },\r\n        Remove_Number_Of_Item: {\r\n            desc: \"Removes the specified amount from that slot (DOES NOT CHECK IF THAT AMOUNT IS IN THE STACK)\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"],\r\n                [\"Slot\", \"Integer\"],\r\n                [\"Amount to Remove\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Spawn_Item: {\r\n            desc: \"Used to spawn an item pickup of the item and amount specified\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"],\r\n                [\"Item\", \"E_Items Enum\"],\r\n                [\"Amount\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Update_Save_Game: {\r\n            desc: \"Used to update the save game reference with the current inventory (DOES NOT SAVE)\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Inventory Component Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n    },\r\n    macro: {}\r\n\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Pickup_Item: {\r\n            desc: \"Call this to attempt to pickup the item (Handles destroying the item afterwards)\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Item Pickup Object Reference\"],\r\n                [\"Paper Player\", \"BP Paper Player Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Vanish: {\r\n            desc: \"Causes the item to start scaling till it is invisible and then destroy the actor\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Item Pickup Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {}\r\n\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Add_Movement_with_Collision: {\r\n            desc: \"Add Movement with Collision\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper NPC Object Reference\"],\r\n                [\"Delta Location\", \"Vector\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Can_Dialogue_be_Read: {\r\n            desc: \"Gets if the dialogue on this NPC is available to be read\",\r\n            inputs: [\r\n                [\"Target\", \"BP Paper NPC Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Return Value\", \"Boolean\"]\r\n            ]\r\n        },\r\n        Check_NPC_Direction: {\r\n            desc: \"Retrieves the direction the BP_PaperPawn is facing\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper NPC Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Direction\", \"EPawnDirectionState Enum\"]\r\n            ]\r\n        },\r\n        Check_for_Dialogue: {\r\n            desc: \"Checks if the actor has dialog attached\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"Interactable Interface Interface\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Return Value\", \"Boolean\"]\r\n            ]\r\n        },\r\n        Does_Dialogue_Exist: {\r\n            desc: \"Checks if the current NPC has dialogue attached\",\r\n            inputs: [\r\n                [\"Target\", \"BP Paper NPC Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Return Value\", \"Boolean\"]\r\n            ]\r\n        },\r\n        Get_Dialogue: {\r\n            desc: \"Checks if the actor has dialog attached\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"Interactable Interface Interface\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Dialogue Array\", \"Array of Texts\"]\r\n            ]\r\n        },\r\n        Get_Relative_Movement: {\r\n            desc: \"Figures out where the NPC should be by the end of moving to the next point\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper NPC Object Reference\"],\r\n                [\"Current Index\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Amount to Add\", \"Vector\"]\r\n            ]\r\n        },\r\n        Next_Point_in_List: {\r\n            desc: \"Sets the current index to the next index in line depending on if the NPCs bReversing? state. When reversing it will go to the previous index, if not it will move forward an index. Automatically reacts depending on if there are no points left and what action to take\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper NPC Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Return Value\", \"Integer\"]\r\n            ]\r\n        },\r\n        Reset_Path: {\r\n            desc: \"Resets the NPCs location to its initial location and resets the path points current index\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper NPC Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Set_Can_Dialogue_be_Read: {\r\n            desc: \"Resets the NPCs location to its initial location and resets the path points current index\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper NPC Object Reference\"],\r\n                [\"Can Dialogue be Read?\", \"Boolean\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Switch_on_End: {\r\n            desc: \"Reacts depending on the NPCs EPathCollisionType to either, reset the path, stop movement or reverse the path\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper NPC Object Reference\"],\r\n                [\"Reversing?\", \"Boolean\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Update_Direction: {\r\n            desc: \"Updates the NPCs direction\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper NPC Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Update_Movement_Along_Path: {\r\n            desc: \"Update Movement Along Path\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper NPC Object Reference\"],\r\n                [\"Delta Seconds\", \"Float\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Update_Playback_Rate: {\r\n            desc: \"Update Playback Rate\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper NPC Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Update_State: {\r\n            desc: \"Update State\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper NPC Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n    },\r\n    macro: {\r\n        Calculate_Velocity: {\r\n            desc: \"Calculates the current velocity depending on the current point in the path and returns both positive and negative of the velocity\",\r\n            inputs: [\r\n                [\"Delta Seconds\", \"Float\"]\r\n            ],\r\n            outputs: [\r\n                [\"Negative Velocity\", \"Vector\"],\r\n                [\"Positive Velocity\", \"Vector\"]\r\n            ]\r\n        },\r\n        Get_Min_and_Max: {\r\n            desc: \"Returns the highest and lowest values in a vector, both values will always be positive as the min value is Absolute, this makes values easier to compare\",\r\n            inputs: [\r\n                [\"In Vector\", \"Vector\"]\r\n            ],\r\n            outputs: [\r\n                [\"Max\", \"Float\"],\r\n                [\"Min Pos\", \"Float\"]\r\n            ]\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Get_Anim_State: {\r\n            desc: \"Gets the animation state of the pawn\",\r\n            inputs: [\r\n                [\"Target\", \"BP Paper Pawn Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Return Value\", \"EPawnAnimState Enum\"]\r\n            ]\r\n        },\r\n        Get_Direction: {\r\n            desc: \"Gets the current direction the pawn is facing\",\r\n            inputs: [\r\n                [\"Target\", \"BP Paper Pawn Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Return Value\", \"EPawnDirectionState Enum\"]\r\n            ]\r\n        },\r\n        Set_Anim_Based_on_Direction: {\r\n            desc: \"Sets the current animation state depending the direction the pawn is facing. Takes an array of EPawnAnimStates with four pins, Up, Down, Left, Right, in that variable\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper Pawn Object Reference\"],\r\n                [\"Array\", \"Array of EPawnAnimState Enum\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Set_Anim_State: {\r\n            desc: \"Sets a new value for the EAnimState variable\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper Pawn Object Reference\"],\r\n                [\"Array\", \"Array of EPawnAnimState Enum\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Set_Direction: {\r\n            desc: \"Sets a new value for this pawns EDirection variable\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper Pawn Object Reference\"],\r\n                [\"New Value\", \"EPawnDirectionState Enum\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Set_Is_Moving: {\r\n            desc: \"Sets a new value for this pawns bIsMoving? value\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper Pawn Object Reference\"],\r\n                [\"New Value\", \"Boolean\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Update_Animations: {\r\n            desc: \"Update Animation\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper Pawn Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {}\r\n\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Add_Movement: {\r\n            desc: \"\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper Player Object Reference\"],\r\n                [\"Axis Value\", \"Float\"],\r\n                [\"Right?\", \"Boolean\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Attempt_to_Pickup_Item: {\r\n            desc: \"\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"BP Paper Player Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {\r\n        Get_Opposite_Direction: {\r\n            desc: \"Returns the opposite direction to the one that was set\",\r\n            inputs: [\r\n                [\"Current Direction\", \"EPawnDirectionState Enum\"]\r\n            ],\r\n            outputs: [\r\n                [\"Opposite Direction\", \"EPawnDirectionState Enum\"]\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Get_Inventory_Component: {\r\n            desc: \"Get Inventory Component\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"World Context\", \"Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Inventory Component\", \"BP Inventory Component Object Reference\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {\r\n    }\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Find_New_Game_Spawn_Location: {\r\n            desc: \"Finds the location and direction that the player should be spawned at if a save game was not found\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"GM Game Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {}\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Check_NPC_Direction: {\r\n            desc: \"Retrieves the direction the BP_PaperPawn is facing\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"Interactable Interface Interface\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Direction\", \"EPawnDirectionState Enum\"]\r\n            ]\r\n        },\r\n        Check_For_Dialogue: {\r\n            desc: \"Retrieves the direction the BP_PaperPawn is facing\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"Interactable Interface Interface\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Return Value\", \"Boolean\"]\r\n            ]\r\n        },\r\n        Get_Dialogue: {\r\n            desc: \"Retrieves dialogue from an actor\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"Interactable Interface Interface\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Dialogue Array\", \"Array of Texts\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {}\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Highlight_Button: {\r\n            desc: \"Highlight Button\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"UI Button Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Unhighlight_Button: {\r\n            desc: \"Unhighlight Button\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"UI Button Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {}\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Update_Button_State: {\r\n            desc: \"Updates what type of highlight the slot has\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"UI Inv Slot Object Reference\"],\r\n                [\"Highlight State\", \"EInvSlotHighlightState Enum\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Update_Item: {\r\n            desc: \"Updates the struct for this slot and changes the amount and item image accordingly\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"UI Inv Slot Object Reference\"],\r\n                [\"FInventory Item\", \"F Inventory Struct Structure\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {}\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Change_Active_Button: {\r\n            desc: \"Navigate to the next button in the list, the direction navigated depends on the Up? value (true is up, down is false)\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Base Menu Object Reference\"],\r\n                [\"Up?\", \"Boolean\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Flip_Button_Highlight: {\r\n            desc: \"Flip the highlight of the input UI_Button\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Base Menu Object Reference\"],\r\n                [\"UI Button\", \"UI Button Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Get_Current_Button: {\r\n            desc: \"Get the button that corrosponds with the button index\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Base Menu Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Return Value\", \"UI Button Object Reference\"]\r\n            ]\r\n        },\r\n        Press_Current_Button: {\r\n            desc: \"Presses the currently selected button\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Base Menu Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Setup_Button_Array: {\r\n            desc: \"Initialize the button array, takes an array of UI_Buttons, the order the buttons are in the array is the order they will be navigated\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Base Menu Object Reference\"],\r\n                [\"Buttons\", \"Array of UI Button Object References\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {}\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Increment_Index: {\r\n            desc: \"Increments the CurrentIndex value and returns the new value\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Dialogue Box Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"New Value\", \"Integer\"]\r\n            ]\r\n        },\r\n        Show_Next_Dialogue: {\r\n            desc: \"Attempts to show the next piece of dialogue in the array, returns if this was successful\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Dialogue Box Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Success?\", \"Boolean\"]\r\n            ]\r\n        },\r\n        Start_New_Dialogue: {\r\n            desc: \"Sets the new dialogue array and resets the dialogue to the first item in the array\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Base Menu Object Reference\"],\r\n                [\"Current Dialogue\", \"Array of Texts\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {}\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Flip_Inv_Slot_Highlight: {\r\n            desc: \"Flips between the three inventory highlight states depending on if an item is being moved or not (Automatically accounts for different states and movingItems? value)\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Inventory Object Reference\"],\r\n                [\"UI Inv Slot\", \"UI Inv Slot Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Flip_Inventory_Menu: {\r\n            desc: \"Attempt to remove the inventory menu from the screen\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Inventory Object Reference\"],\r\n                [\"Current State\", \"EMenuState Enum\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Generate_Inv_Grid: {\r\n            desc: \"Adds the inventory slots to the grid panel for display. Should only be called once when first creating the widget\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Inventory Object Reference\"],\r\n                [\"Row Length\", \"Integer\"],\r\n                [\"Inv Size\", \"Integer\"],\r\n                [\"Current Inventory\", \"Array of F Inventory Struct Structures\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Get_Current_Slot: {\r\n            desc: \"Adds the inventory slots to the grid panel for display. Should only be called once when first creating the widget\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Inventory Object Reference\"],\r\n               ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"UI Button\", \"UI Inv Slot Object Reference\"]\r\n            ]\r\n        },\r\n        Hide_Inventory: {\r\n            desc: \"Attempts to hide either the inventory or inventory menu depending on which is state is active\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Inventory Object Reference\"],\r\n                [\"Paper Player\", \"BP Paper Player Object Reference\"],\r\n                [\"Current State\", \"EMenuState Enum\"]\r\n               ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Navigate_Inv_Horizontally: {\r\n            desc: \"Used to horizontally navigate\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Inventory Object Reference\"],\r\n                [\"Right?\", \"Boolean\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Navigate_Inv_Vertically: {\r\n            desc: \"Used to vertically navigate\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Inventory Object Reference\"],\r\n                [\"Up?\", \"Boolean\"],\r\n                [\"New Param\", \"EMenuStates Enum\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Press_Current_Slot: {\r\n            desc: \"Attempts to press the current selected button in the inventory (Accounts for being in the inventory and inventory menu states)\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Inventory Object Reference\"],\r\n                [\"Menu State\", \"EMenuStates Enum\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Swap_Two_Slots: {\r\n            desc: \"Swpas the item and amount between the two specified slots\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Inventory Object Reference\"],\r\n                [\"Slot A\", \"Integer\"],\r\n                [\"Slot B\", \"Integer\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n    },\r\n    macro: {}\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Display_Item_Text: {\r\n            desc: \"Turns the input text into an array and initiates the StartDialogue function from WBP_MainOverlay\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Inventory Menu Object Reference\"],\r\n                [\"Text\", \"Text\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n    },\r\n    macro: {}\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Change_Active_Button_Menu: {\r\n            desc: \"Change Active Button- Menu\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Main Overlay Object Reference\"],\r\n                [\"Up?\", \"Boolean\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        End_Dialogue: {\r\n            desc: \"Resets the visibilty to hide the dialogue box\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Main Overlay Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Play_Fade: {\r\n            desc: \"Plays a fading animation over the players screen, Forward fades in, Reverse fades out\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Main Overlay Object Reference\"],\r\n                [\"Play Mode\", \"EUMGSequencePlayMode Enum\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Delay\", \"Float\"]\r\n            ]\r\n        },\r\n        Press_Button_Menu: {\r\n            desc: \"Press Button- Menu\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Main Overlay Object Reference\"]\r\n               ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Show_Next_Dialogue: {\r\n            desc: \"Tries to show the next piece of dialogue. If there is no dialogue left it runs EndDialogue\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Main Overlay Object Reference\"]\r\n               ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Success?\", \"Boolean\"]\r\n            ]\r\n        },\r\n        ShowHide_In_Game_Menu: {\r\n            desc: \"Flips the visibilty state of the in game menu\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Inventory Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        },\r\n        Start_Dialogue: {\r\n            desc: \"Changes the visibility of widgetst to allow dialogue to be seen and sets the dialogue to be shown\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Main Overlay Object Reference\"],\r\n                [\"Current Dialogue\", \"Array of Texts\"],\r\n                [\"Inv Dialogue?\", \"Boolean\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {}\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        \r\n    },\r\n    macro: {\r\n        Check_Can_Continue: {\r\n            desc: \"Changes the visibility of widgetst to allow dialogue to be seen and sets the dialogue to be shown\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"]\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\nexport default data","const data = {\r\n    function: {\r\n        Update_Save_Game: {\r\n            desc: \"Updates the save game reference with the new location, direction and inventory of the player (DOES NOT SAVE)\",\r\n            inputs: [\r\n                [\"In\", \"Exec\"],\r\n                [\"Target\", \"WBP Player Menu Object Reference\"]\r\n            ],\r\n            outputs: [\r\n                [\"Out\", \"Exec\"],\r\n                [\"Game Instance\", \"BP Game Instance Object Reference\"]\r\n            ]\r\n        }\r\n    },\r\n    macro: {\r\n        \r\n    }\r\n}\r\n\r\nexport default data","const data = {\r\n    \"title\": \"U2_5D_Starter_Kit\",\r\n    \"classes\": [\r\n        \"BP_Base_Usable_Item\",\r\n        \"BP_Door_Collision\",\r\n        \"BP_Game_Instance\",\r\n        \"BP_Inventory_Component\",\r\n        \"BP_Item_Pickup\",\r\n        \"BP_Paper_NPC\",\r\n        \"BP_Paper_Pawn\",\r\n        \"BP_Paper_Player\",\r\n        \"BPFL_Actor\",\r\n        \"GM_Game\",\r\n        \"Interactable_Interface\",\r\n        \"UI_Button\",\r\n        \"UI_Inv_Slot\",\r\n        \"WBP_Base_Menu\",\r\n        \"WBP_Dialogue_Box\",\r\n        \"WBP_Inventory\",\r\n        \"WBP_Inventory_Menu\",\r\n        \"WBP_Main_Overlay\",\r\n        \"WBP_Menu\",\r\n        \"WBP_Player_Menu\"\r\n    ]\r\n\r\n}\r\n\r\nexport default data","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left 250px;\r\n`\r\nconst SideNav = styled.div`  \r\n  height: 100%;\r\n  width: 250px;\r\n  position: fixed;\r\n  z-index: 1;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: #6ec233;\r\n  overflow-x: hidden;\r\n  box-shadow: 5px 0px 5px #444; \r\n`\r\n\r\nexport { Container, SideNav }","import styled from 'styled-components'\r\n\r\nconst style = `color:#6ec233; font-weight:550; font-size:1.3rem; margin: 30px; padding-bottom:10px; border-bottom: 1px solid black `\r\n\r\nconst H1Title = styled.h1 `color:#111; font-weight:900; font-size:1.5rem; margin:5% 5% 2% 5%; `\r\n\r\nconst H2Title = styled.h2 `${style}`\r\n\r\nconst H3Title = styled.h3 `${style} margin-left:50px;`\r\n\r\nexport { H1Title, H2Title, H3Title }","import React from 'react'\r\nimport { H1Title } from '../../styled/text'\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <H1Title>{this.props.title}</H1Title>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Header;","import styled from 'styled-components';\r\n\r\nconst style = \"background-color: #6ec233; border: none; color: #111; padding: 8px 14px; font-weight:750; font-size:15px; text-align:left;\"\r\n\r\nconst NavButton = styled.button `\r\n  ${style} width:100%;\r\n  :hover { background-color:#83cc50; };\r\n  :focus { outline:none; }`\r\n\r\nconst List = styled.ul` list-style-type:none; margin-block-start:0.3em; `\r\n\r\nconst ItemList = styled(List)` padding:5%; `\r\n\r\nexport { style, List, NavButton, ItemList }","import React from 'react'\r\nimport { NavButton, ItemList } from '../../styledcomponents'\r\n\r\nclass ClassTable extends React.Component {\r\n\r\n    retrieveData = (e) => {\r\n        e.preventDefault();\r\n        this.props.state.class = e.target.firstChild.data;\r\n        this.props.state.datalog.push(this.props.state.class);\r\n        this.props.state.type = \"class\";\r\n        this.props.functionCall(this.props.state);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ItemList>\r\n                {this.props.state.data.classes.map((item, id) => {\r\n                    return (\r\n                        <li key={id}>\r\n                            <NavButton onClick={this.retrieveData.bind(this)} >{item}</NavButton>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ItemList>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ClassTable;\r\n","import { SideNav as Nav } from \"../styled/containers\";\r\nimport Header from './components/header'\r\nimport ClassTable from './components/classtable'\r\nimport React from 'react'\r\n\r\nclass SideNav extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Nav>\r\n                <Header title={this.props.state.data.title} />\r\n                <ClassTable state={this.props.state} functionCall={this.props.func} />\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SideNav;","import styled from 'styled-components'\r\nimport { style, List } from '../styledcomponents'\r\n\r\nconst PinBox = styled.li` ${style} margin: 2px;  `\r\n\r\nconst NodeList = styled(List)` padding-left:6%; padding-right:5%; `\r\n\r\nconst NodeImage = styled.img` display:block; margin-left:5%; `\r\n\r\nexport { PinBox, NodeList, NodeImage }","const Classes = {\r\n    BP_Base_Usable_Item: require('../data/classes/BP_Base_Usable_Item.js').default,\r\n    BP_Door_Collision: require('../data/classes/BP_Door_Collision.js').default,\r\n    BP_Game_Instance: require('../data/classes/BP_Game_Instance.js').default,\r\n    BP_Inventory_Component: require('../data/classes/BP_Inventory_Component.js').default,\r\n    BP_Item_Pickup: require('../data/classes/BP_Item_Pickup.js').default,\r\n    BP_Paper_NPC: require('../data/classes/BP_Paper_NPC.js').default,\r\n    BP_Paper_Pawn: require('../data/classes/BP_Paper_Pawn.js').default,\r\n    BP_Paper_Player: require('../data/classes/BP_Paper_Player.js').default,\r\n    BPFL_Actor: require('../data/classes/BPFL_Actor.js').default,\r\n    GM_Game: require('../data/classes/GM_Game.js').default,\r\n    Interactable_Interface: require('../data/classes/Interactable_Interface.js').default,\r\n    UI_Button: require('../data/classes/UI_Button.js').default,\r\n    UI_Inv_Slot: require('../data/classes/UI_Inv_Slot.js').default,\r\n    WBP_Base_Menu: require('../data/classes/WBP_Base_Menu.js').default,\r\n    WBP_Dialogue_Box: require('../data/classes/WBP_Dialogue_Box.js').default,\r\n    WBP_Inventory: require('../data/classes/WBP_Inventory.js').default,\r\n    WBP_Inventory_Menu: require('../data/classes/WBP_Inventory_Menu.js').default,\r\n    WBP_Main_Overlay: require('../data/classes/WBP_Main_Overlay.js').default,\r\n    WBP_Menu: require('../data/classes/WBP_Menu.js').default,\r\n    WBP_Player_Menu: require('../data/classes/WBP_Player_Menu.js').default,\r\n};\r\n\r\nexport default Classes;","import React from 'react'\r\nimport { H2Title, H3Title } from '../../components/styled/text'\r\nimport { NodeImage, PinBox, NodeList } from '../../components/styled/node'\r\nimport {Container} from '../../components/styled/containers'\r\nimport Classes from '../../data/index'\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst NodeDetails = styled.div`\r\ndisplay:flex;`\r\n\r\nconst NodeTitle = styled.p`\r\npadding-left:10px;\r\npadding-right:10px;\r\nmargin: auto 0 auto 0;\r\nborder-right:2px solid black\r\n`\r\n\r\nconst PinDesc = styled.p`\r\npadding-left:10px;\r\npadding:right:10px;\r\n`\r\n\r\nconst NodeDesc = styled.p`\r\nmargin:30px 30px 30px 40px;\r\ncolor:#6ec233;\r\n`\r\n\r\nclass PinList extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <H3Title>{this.props.type}</H3Title>\r\n                <NodeList>\r\n                {this.props.list.map((item, id) => {\r\n                    return ( \r\n                        <PinBox key={id}><NodeDetails><NodeTitle>{item[0]} </NodeTitle><PinDesc>{item[1]}</PinDesc></NodeDetails> </PinBox>\r\n                    )\r\n                })}\r\n            </NodeList>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nclass Node extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props.state.focusType = Classes[this.props.state.class][this.props.state.mode][this.props.state.function]\r\n    }\r\n\r\n\r\n    render() {\r\n        const { desc, inputs, outputs } = this.props.state.focusType;\r\n        return (\r\n            <Container>\r\n                <H2Title>{this.props.state.class} {\">\"} {this.props.state.function}</H2Title>\r\n                <NodeDesc>{desc}</NodeDesc>\r\n                <NodeImage src={`${process.env.PUBLIC_URL}/img/` + this.props.state.class +\"/\"+ this.props.state.function + \".png\"} />\r\n                <PinList list={inputs} type=\"Inputs\"/>\r\n                <PinList list={outputs} type=\"Outputs\"/>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Node;","import styled from 'styled-components'\r\n\r\nconst NodeButton = styled.li` margin:2px; box-shadow: 5px 5px 5px #444; `\r\n\r\nconst NodeDetails = styled.div` display:flex; `\r\n\r\nconst NodeTitle = styled.p` padding-left:10px; padding-right:10px; margin: auto 0 auto 0; border-right:2px solid black `\r\n\r\nconst NodeDesc = styled.p` padding-left:15px; padding:right:15px; `\r\n\r\nexport {NodeButton, NodeDetails, NodeTitle, NodeDesc}","import React from 'react'\r\nimport { NodeButton, NodeDetails, NodeDesc, NodeTitle } from '../styled/class'\r\nimport { NavButton } from '../styledcomponents'\r\nimport { NodeList } from '../styled/node'\r\nimport Classes from '../../data/index'\r\n\r\nlet dataType = {};\r\n\r\nclass LinkTable extends React.Component {\r\n\r\n    checkDataType = () => {\r\n        if (this.props.mode === \"function\") { dataType = Classes[this.props.state.class].function } else { dataType = Classes[this.props.state.class].macro };\r\n    }\r\n\r\n    retrieveData = (e, item) => {\r\n        this.checkDataType();\r\n        e.preventDefault();\r\n        this.props.state.mode = this.props.mode;\r\n        this.props.state.function = item;\r\n        this.props.state.datalog.push(this.props.state.function);\r\n        this.props.state.type = \"function\"\r\n        this.props.functionCall(this.props.state);\r\n    }\r\n\r\n    render() {\r\n        this.checkDataType()\r\n\r\n        return (\r\n            <NodeList>\r\n                {Object.keys(dataType).map((item, id) => {\r\n                    const { desc } = dataType[item];\r\n                    return (\r\n                        <NodeButton key={id}>\r\n                            <NavButton onClick={(e) => this.retrieveData(e, item)} ><NodeDetails><NodeTitle>{item}</NodeTitle><NodeDesc >{desc}</NodeDesc></NodeDetails></NavButton>\r\n                        </NodeButton>\r\n                    );\r\n                })}\r\n            </NodeList>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default LinkTable;\r\n","import React from 'react'\r\nimport {Container} from '../../components/styled/containers'\r\nimport {H2Title, H3Title} from '../../components/styled/text'\r\nimport LinkTable from '../../components/container/linktable'\r\n\r\nclass Class extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <>\r\n                    <H2Title>{this.props.state.class}</H2Title>\r\n                    <H3Title>Functions</H3Title>\r\n                    <LinkTable state={this.props.state} mode=\"function\" functionCall={this.props.func} />\r\n                    <H3Title>Macros</H3Title>\r\n                    <LinkTable state={this.props.state} mode=\"macro\" functionCall={this.props.func} />\r\n                </>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Class;","import React from 'react'\r\nimport { Container } from '../../components/styled/containers'\r\nimport { H2Title } from '../../components/styled/text'\r\n\r\nclass Index extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <H2Title>Select the class you wish to view on the left.</H2Title>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Index;","import React from 'react';\r\nimport data from '../data/classindex'\r\nimport SideNav from '../components/sidenav'\r\nimport Node from './subpages/node'\r\nimport Class from './subpages/class'\r\nimport Index from './subpages/index'\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { class: \"\", function: \"\", id: -1, type: \"home\", data: data, datalog: [data.title], mode: \"\"}\r\n    }\r\n\r\n    retrieveState = (state) => {\r\n        this.setState(state);\r\n\r\n    }\r\n\r\n    render() {\r\n        switch (this.state.type) {\r\n            case \"home\": {\r\n                return (\r\n                    <>\r\n                        <SideNav state={this.state} func={this.retrieveState.bind(this)} />\r\n                        <Index/>\r\n                    </>\r\n                );\r\n            }\r\n            case \"class\": {\r\n                return (\r\n                    <>\r\n                        <SideNav state={this.state} func={this.retrieveState.bind(this)} />\r\n                        <Class state={this.state} func={this.retrieveState.bind(this)}/>\r\n                    </>\r\n                )\r\n            }\r\n            case \"function\": {\r\n                return (\r\n                    <>\r\n                        <SideNav state={this.state} func={this.retrieveState.bind(this)} />\r\n                        <Node state={this.state}/>\r\n                    </>\r\n                )\r\n            }\r\n            default: { return ( <p>This is not a valid page and should not have been shown. Please refresh the browser.</p> ) }\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n            headers: { 'Service-Worker': 'script' }\n        })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './pages/app.js';\nimport * as serviceWorker from './serviceWorker'\n\nconst rootElement = document.getElementById('root');\nReactDOM.render( <App/>, rootElement );\nserviceWorker.unregister();\n"],"sourceRoot":""}